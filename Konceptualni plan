File class 
			-imefajla 30bajta
			-file allocate 1bajt
			-isDirectory 1bajt
			-dateCreated 30bajta
			-dateUpdated 30bajta
			-DateLastUsed 30bajta
			-FileSize 4bajta
			-BitMap * 8bajta
			-flagMemorisan u mft-u
	
		size==134
Maksimalno 7825 fajlova

Root 		
-Name 30bajta
	-isDirectory 1bajta
	-createdDate 30bajta
	-LastUsed 30bajta
	-lastModified 30bajta
	-fileAlocateFlag 1bajta
	-ResFlag 1bajta
	-SystemSize 4bajta
	-DirectoryArray * subdirectory 256bajta
	-FreeSpace 4bajta
	-FreeBlocks 4bajta
	-ClusterSize 4bajta

Directory
	-Name 30bajta
	-isDirectory 1bajta
	-createdDate 30bajta
	-LastUsed 30bajta
	-lastModified 30bajta
	-fileAlocateFlag 1bajta
	-ResFlag 1bajt
	-Block 8bajta
	-Size 4bajta
	-Depth 1bajta
	-signature (subdirectory) - 1bajt
	Niz u kom se nalazi prvo direktorijumi fajla a potom fajlovi dijeli ih -1
dir1={ (dir2 start block)4,(dir5 start block)42,(dir6 start block)14,-1,(file 1 start block)66,...}
size===137+163
64662 max direktorijuma

Cluster
	-byte 1bajt *   (36 864)

MFT
[	root-info   	]  [	dir1       {1} ]	[  	dir2    {1-podirektorijum} ] [  	dir3   {2} ] .. 
][FFFFFFF]......[FFFFFFF] 	[ 	file1   	] [ 	file2 	] … [ 	file n	]  [] pocetak niza zauzetosti blokova  [] .. []   (fiksiramo velicinu mft-a na 2mb)
………………………………………………………………………………………………………....// DATA[512bajta/blok] \\   
	  			
…. [].. [].. [  dir 8 ][000.x16.00]  ….garbage…. [0000.x16.00]  [ filen ]  [ file(n-1) ]  …. []..
			|			  | 
Provjeravamo bajtove od kraja dir-a, da bismo pronasli fleg koji oznacava kraj. 

Lista funkcija: 
 Boolean CreateFile()
Boolean CheckSizeOfFile()
Boolean CheckNameOfFIle() 
Boolean isDirectoryValid(directory)
Boolean DirectoryDepth(path)
Void GetFile(path) 
Void goToBlock(block)
Void findData(string)
Boolean isBlockFree()
Boolean IsEnoughSpace()
Boolean isBlockUsed()
      -	Boolean makeDir()
		-void Update() 
			->void UpdateSizeofSystem()
	     -void CreateBitMap()
	    ////////
	Funkcije potrebne za implementaciju, ls,mkdir.. 
	  ////////
Info za memorisanje: 
Ako direktorijumi imaju podirektorijume onda cemo na njihovom zavrsetku citanja dodati signature broj koji ce oznacavati kojem direktorijumu pripadaju. Takodje ovo vazi i za fajlove koji pripadaju tom direktorijumu.
*Razliku izmedju fajlova pravimo pomocu dubine fajla i vec postojeceg signature broja. 
*Fajlove u mft cemo pretrazivati i na osnovu toga zakljuciti kojem fajlu pripada. 


 Ako nesto fali samo dodavajte
 おはじょ
 Sa prvog zasijedanja zavisne komunisticke anti radne totalno kapitalno koruptne partije 

velicina bloka u fajl sistem za data blok  iznosi 512 bajtova i odnosi se samo na data blok.
Data blok se nalazi udaljen tacno 2MB od pocetka binarnog fajla ( mozemo smanjiti ako sutra kaze da ne treba previti previse fajlova na 1.4MB)
ali za sada dva.
MTF na pocetku se prvo nalazi root diredtorijum u kom se nalaze sve informacije vezane za fail sistem on zauzima fiksnu velicinu i sadrzi sve kao ditektorijum (klasicni ) plus dodatne promjenljive i funkcije koje su karakteristicne za root
nakon root info dolaze direktorijumi u kojima se nalazi sve gore navedeno oni imaju fiksnu velicinu trenutno od 300B i upisuju se odmah posle root info u binarni fajl 
sekvencijalno.
-svaki root sadrzi niz u kome se memorise pocetni blok ( u mft ne u data ) gdje se nalazi heder za dati direktorijum unutar mft-a i redom se memorisu svi direktorijumi unutar tor direktorijuma sve dok se ne +++naidje na negativne brojeve koji oznacavaju fajlove
misli ce na to da se pozitivnim brojevima oznacavaju direktorijumi a negativnim brojevima fajlovi (taj broj moramo prebaciti u pozitivan i to nam je onda lokacija hedera unutar mft-a)
razlog ovome je kada se dodaju novi fajlovi ili direktorijumi da ne moramo non stop pomijerati elemente u nizu sto ce kostati vremena ovako samo idemo i gledamo da li je pozitivan ili ne 
ostala logika ostaje ista kao sto smo se dogovorili.
-fajl u sebi sadrzi sve gore navedeno i on se u mft memorise od kraja mft-a i fiksne je velicine logika fajlova i direktorijuma je kao steka i hipa 
oni rasti jedan prema drugom  provjeru da nece doci do preklapanja ))?? na naci da stavimo 16 bajtova na vrh fajl niza i 16 bajta na kraj niza direktorijuma i provjeravamo posebno za direktorijume i fajlove tako sto uzmemo njihovu velicinu u bajtovima i provjerimo da li se u narednom segmentu nalazi slucajno vise od 7 uzastopnih jedinica ako se to desi znaci da postoji sansa da prepisemo kraj niza direktorijuma ili obrnuto fajlova 
+++++++DORADITI OVO ++++++++
-unutar dajla imamo blok koji u sebi sadrzi pocetnu lokaciju (prvi blok gdje je memorisan podatak) i duzinu (koliko blokova je uzeo u memoriju da znamo kao sigurnost (da sve procitamo)
----
ispod ovoga ce se nalaciti niz u kome su memorisani svi blokovi (pozicije gdje se nalaze u odnosu na pocetak ) i kazuju da li je blok zauzet ili se jos koristi 
svaki put kada se izbrise fajl ili firektorijum treba da se u ovom nizu izvrsi update isto vazi i za upis podataka;-
------
u data segmentu ----------
-sve je podijeljeno u blokove od 512B i na u koje se memorise nas podatak s tim da ce mo izgubiti 4B na kraju bloka koji ce govoriti gdje se nalazi sledeci blok u koji je memorisan ostatak nasef fajla 
-u data segmentu ce se memorisati samo fajlovi direktorijumi ce se nalaziti u mft-u 
-memorisanje fajlova na pocetku dok se ne popuni pocinje od kraja data segmenta sve dok mogu podatci stati (da se upisuju sekvencijalno )
ukoliko to nije moguce onda upisati koliko se moze i vratiti se na pocetak data segmenta 
-u root direktorijumu voditi racuna o slobodnom prostoru ( update svaki upis i izmjenu velicine fajla ) isto vazi i za direktorijum u kom se fajl nalazi 
======
----
opcije kao brisanje fajla,pomijeranje fajla (iz jednog dir u drugi ),preimenovanje i slicne operacije ce se raditi samo nad direktorijumima u njima ce se raditi te manipulacije 
----
kada korisnik kreira pracan fajl ili direktorijum u tom direktorijumu ce se kreirati heder sa svim informacjama ali nece biti popunjeni podatci o blokovima bice 00
----
trazenje fajlova ce se odvijati preko path treba ce nam funkcije za stringove i globalna jedna promjenljiva koja moze da se vidi iz svih funkcija koje koriste path 
da ne moramo raditi rekurcije i slicno kontam lakse nam je jednu globalnu i fju samo odsijecati i slati funkciji i funkciju pozivati onoliko puta sve dok ne dodjemo do trazene lokacije 
\ ce nam biti terminator za kraj stringa 
----
funkcija goToBlock() ce primati velicinu bloka i pocetnu poziciju da je mozemo iskoristiti i za mft i za data segment tako da ce mo morati imati i velicine hedera i data segmenata negdje memorisane 
to mozemo spakovati u heder od roota koa dodatni info 
----
funkcija findData() bi trebala primati path i sa pocetka ga odsijecati i porediti fajlove po nivoima a potom po dubini kalsican search s tim da ce nam trebati funkcije za manipulaciju sa stringovima ali one imaju gotove u javi 
----
funkciju koja ce nam vracati path mozemo napraviti temp niz koji ce memorisati nasu poziciju trenutno u fajlu kada udjemo u fajl da noda na niz a kada izadjemo da ukloni 
---
get metoda treba da sa racunara dohvati fajl i upise ga u nas sistem tu koristiti univerzalne funkcije za upis hedera i za upis u data segment (memorisanje )
tako da mozemo koristiti univerzalno ili napraviti jednu kojoj prosledjumemo u koju vrstu bloka upisujemo i njegovu lokaciju gdje ce se upisati 
mozda ovo bolje 
----
komanda ls samo da procita direktirijume i fajlove iz niza onog i ispise imena na ekranu 
!!!!!! moramo zapamtiti ili bolje odrediti kojim redoslijedom ce mo memorisati podatke tako da smo umogucnosti direktno da skacemo sa lokacije na lokaciju bez da ucitavamo fajl(u smislu prvo one promjenljive koje zauzimaju malo prostora a onda one velike )
da negubimo vremena na trazenju po bloku !!!!
----
echo da realizujemo preko dinamicke alokacije kada pozove echo da napravimo dinamicki fajl pustimo da se u njega upisuje sta god se hoce i onda pozovemo funkciju za upis i upisemo ako je na dusku samo prepisemo postojeci fajl a ako nije funkciju za cisti upis i raspaliti 
!!!!@ trebamo imati jednu globalnu u kojoj ce se nalaziti trenutna pozicija zadnjeg memorisanog bloka u data segmentu @@@@
!!!!
moramo rijesiti jos za onu rezidentnost za fajlove koji su manji od 128B kako da njig cuvamo u mft-u ako ce mo koristiti niz na nacin da nam negativni brojevi oznacavaju fajlove a pozitivni dir 
moramo nekako napraviti nesto da mozemo razlikovati koji su ti specijalni fajlovi u kojima je memorisano ono 128B


gramaticke greske budite dobri i popravite 
((((()))))))
Fight Bugs                      |     |
                                \\_V_//
                                \/=|=\/
                                 [=v=]
                               __\___/_____
                              /..[  _____  ]
                             /_  [ [  M /] ]
                            /../.[ [ M /@] ]
                           <-->[_[ [M /@/] ]
                          /../ [.[ [ /@/ ] ]
     _________________]\ /__/  [_[ [/@/ C] ]
    <_________________>>0---]  [=\ \@/ C / /
       ___      ___   ]/000o   /__\ \ C / /
          \    /              /....\ \_/ /
       ....\||/....           [___/=\___/
      .    .  .    .          [...] [...]
     .      ..      .         [___/ \___]
     .    0 .. 0    .         <---> <--->
  /\/\.    .  .    ./\/\      [..]   [..]
 / / / .../|  |\... \ \ \    _[__]   [__]_
/ / /       \/       \ \ \  [____>   <____]

za funkcije u mainu za unos komandi sve ce primati string (path) i njega onda raskomadati tako da ce nam trebati jedna 
univerzalna funkcija koja ce komadati string i univerzalna koja ce na osnovu imena ( komada stringa) pretrazivati mft i 
vracati poziviju bloka u kojojom se nalazi nas fail ili sta vec i da nekako po referenci vracamo putanju po kojoj se kretala 
dok je trazlila fail. Znam ono stace korisnik je unjeo putanju ali to da imamo kada on unese ime i kaze daj mi gdje se nalazi 
da imamo odmah kako on trazi da usput i generise path
tj ova funkcija koja komada ce se koristiti sa nekakvom petljom i pozivati kunfciju za trazenje koja ce primati samo jedan komad tog 
stringa i na osnovu njega traziti nas npr prvo direktorijum citace sve dok ne naleti na njega ( prvih 30 bajtova koji ce nam predstavljati 
ime svakog bloka i porediti sa nasim) zatim kada nadje taj blok koji odgovara tu ce se zaustaviti i onda citati elemente iz naseg niza ako
procita prvi element 55555 ispisati da je dir prazan u suprotnom sada nam treba opet jedna univerzalna funkcija koja ce nas pomijerati po blokovima 
unutar mft-a prima int (br iz niza) zatim gleda da li je veci od 10000 ako jeste racunaj ofset bloka jer je to onaj nas specijalac gdje se data mem u mft-u i
da se pozicionira na taj blok zatim se poziva ona nasa funkcija za trazenje dati joj string i ona ce ponovo citati 30 bajtova i porediti ih pri tome napraviti da 
nekako po referenci generice putanju kojom je isla do fajla u ovom primjeru znam suvisno je jer je korisnok dao ali da imamo vec gotovu to mozemo i uraditi uz pomoj jedne male 
funkcije koja prima ime direktorijuma i dodaje ga u nas path a kada izadjemo iz naseg dira da ga ukloni to mozemo provjeravati u smislu da li je dir ako jeste da li su imena ista ako nisu da 
li su prethobna imena ista ako jesu ukloni trenutni  ako nisu dodaj ime tog dira na kraj naseg patha
///////
za data segment nam nece trebati puno funkcija ( koje ce raditi sa blokovima )
|￣￣￣￣￣￣|
| FROM    |
| HERE    | 
|         |
| ＿＿＿＿＿| 
(\__/) || 
(•ㅅ•) || 
/ 　 づ
{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{--------
funkcija za citannje iz data segmenta treba da prima pocetni blok i koliko blokova zauzima
radice na principu da cita kompletan blok tako sto ce na pocetku bloka za preskoci jedan bajt ili jedan bit (da BIT) (meni se vise svidja bit ali ako je lakse programirati sa bajtom i moze ali isto ce raditi)
taj bit ce nam sluziti da kasnije znamo da li je blok slobodan ili ne ,a da pri tome ne gubimo prethobno sacuvane podatke zbog (data recovery) i na kraju imamo dva bajta koja nam govore gdje se nalazi sledeci blok od ovog bloka ili od pocetka sta je 
lakse za programirati (da nastavi od tekuceg bloka ili da krene od pocetka isto, na pocetku ce 
raditi brze od trenutnog ali nakon 100-200 upisa onda od pocetka ali razlika je u 17.43ms)!!!! Koristimo od bloka gdje se trenutno nalazimo i na taj blok dodamo koliko blokova imamo do sledeceg (
mora biti u mogucnosti da se ova komanda wrti ukrug da kada dodje do kraja da se ponovo vrati na pocetak kada je EOF da se vrati na pocetak data segmenta)
citanje bloka klasicno kao iz c-a kada dodjemo do date pozicije preskoci 1bit zatim citaj sve do kraja bloka i onda uraditi odsijecanje zadnja dva bita 
od ucitanog bloka, to se treba da memorise u jedan int ovo se moze uraditi da se razbije opet na dve funkcije funkciju za trazenje i za citanje iz bloka 
----trazenje SearchForR/W bloka mozemo iskoristiti i za brisanje i za citanje ona treba samo da primi poziciju bloka i nista vise zatim da pomjeri pokazivac fajla ( eof ili kako se zove) na 
tu lokaciju i da vrati da je nasao blok (poziciju bloka u memoriji i ta pozicija koja se vraca se oduzima od prethodno memrisanog bloka i razlika se upisuje u zadnja dva bajta,ako je rjesenje negativno znaci da se vratio na pocetak ali svejedno onda se uzima apsolutna vrijednost i ona memorise).
----citanje treba da od pozicije gdje je postavljen pokazivc unutar fajla da preskoci jedan bit i onda krene ucitavati sve vrijednosti do zadnja dva bajta
kada dodje do zadnja dva bajta ( to mozemo lako odrediti svi blokovi su nam fiksne velicine 128B oduzmemo 1bit na pozetku i 16bita na kraju tj od ukupnog broja bita oduzmemo 17 i znamo koliko trebamo procitati dok ne dodjemo do 
zadnja dva bajta koja oznacavaju sledeci blok)
zatim se citaju i ta dva bajta pretvaraju u int ili char i prosledjuje se f-ji za trazenje 
////-----za upis
f-ja SetToFree()   koja pre nego sto se krene raditi sa nasim sistemom mora da prodje kroz data segment kretajuci se velicinom bloka 128B i setovati 1bit na 0 da znamo da je dati blok slobodan 
to for petlja krece od kraja mft-a sve dok ne dodje do kraja fajla pocetak svakih 128B upisi 0 (da nam kasnije bude lakse provjeravati da li je blok slobodan ili ne)
@@@----!!!trebace nam jedna globalna koja ce cuvati kraj upisa tj pokazivati na kraj data segnemta ne kompletnog data segmenta nego do kraja dokle je popunjen
tako da kada vrsimo upis novog fajla odmah krecemo da li ga mozemo na kraj upisati u komadu ako ne onda da trazimo blokove po memoriju 
----- f-ja za trazenje prima samo koliko blokova treba da se smjesti podata koja je slicna prethodnoj f-ji za trazenje s tim sto ova kao povratnu vrijednost treba da vrati referencu na kreirani niz od slobodnih blokova 
starta svoje pretrazivanej od krajnjeg upisanog fajla i krece korakom velicine bloka citajuci samo prvi bit i gledajuci da li je blok slobodan ili ne ( sekvencijalno ce to ispitivati ili ako ste voljni da ubrzamo mozemo koristiti trebove koji ce odmah da za razlicitih pozicija u fajlu startati pretragu JK:) )
ako jeste slobodan vidi da li je sledeci i sledeci itd dok ne nadje sve potrebne blokove ( ako ne bude dovoljno blokova na kraju tj ako je dosla do EOF treba da se vrati na pocetak i ponovo krene traziti)
kada nadje sve treba da vrati referencu f-ji za upis;
-------f-ja za upis WRITE() prima ime fajla koje korisnik zeli unjeti i prvo sto radi je da provjerava kolika je velicina fajla i koliko imamo slobodno prostora unutar naseg sistema na osnovu 
info-a iz root-a ako imamo dovoljno velicinu fajla podijeliti na blokove 128B i pozvati f-fu za trazenje blokova (prethodnu) od te f-je dobija nazad referencu na niz brojeva koji predstavljaju blokove gdje se treba upisati i slocno kao f-a za citanje
posto isto f-je rade mozemo iskoristiti trazenje za citanje SearchforR/W kojoj ce mo iz naseg niza dati jedan blok f-ja ce nas pozicionirati na to mejsto mi ce mo prvo setovati prvi bit na 1 a zatim krenuti upisivati fajl 128B-17bit kada to uradimo 
u zabnja dva bajta upisemo lokaciju sledeceg bloka vracamo ce nazad ponovo pozivamo f-ju za trazenje SearchforR/W i sve kod ne dodjemo do kraja 
u zadnji blok upisujemo -1 kao flag da znamo da smo dosli do kraja i da vise nema fajla
-------f-ja za brisanje DELETE prima pocetni blok dajla i duzinu blokova radi tako sto ce  koristiti istu f-ju za trazenje SearchforR/W pozicionirati ce nas na blok i mi sve sto radimo jeste samo ce mo promijenuti prvi bit 
sa 1 na nula i ocitati zadnja dva bajta koja ce mo ponovo proslijediti f-ji SearchR/W i tako sve dok ne dodjemo do kraja blokova (koliko blokova nam je fajl zauzimao)(
ono -1 na kraju nam sluzi iz razloga da kada citamo fajl da znamo gdje je njegov kraj 
______ za citanje fajla mozemo napraviti dodatno ubrzanje ili nama olaksanje da ako je velicina blokova veca od jedan onda tacno znamo da moramo citati 128B-17bit-a ako je 1 blok zauzet onda citati faj na nacin da ce mo prvo ucitati 15 bita na pocetku to je kada preskocimo onj 1 i onda citati po dva bajta i provjeravati da li je to -1 ili ne  i to isto raditi i 
za zadnji blok ovo mozemo isto staviti u jednu f-ju koja ce primati ili prvi ili zadnji blok FirstLastBlock(int);
------mozda fali jos koja f-ja ali ovo je sto ne najvaznije 
f-ja za setovanje na nule f-ja koja ce citati,za trazenje pozicije bloka,za trazenje slobodnih blokova,za upisivanje,za brisanje 
to su osnovne koje moraju biti 
@@@@@@
defragmentaciju ce mo raditi Aaaaaaaaaaaaaaaaaaaaaaaauuuuuuuuuuuuu fuck to ce biti F*** totalan F***                            -----------ZNAM -_- nema potrebe za *
mora se ovo jos razraditi ali ovo sto pise je sva logika za data segment i ovo da se iskuca treba 4 sata ( da se iskuca!!! ne i debaguje )
ko ima vremena nek uzme koju hoce f-ju ovdje doda ime oplesti 

------modifikacija f-je za brisanje u data segmentu zapravo ce sve biti isto samo sto ce umjesto da prvi bajt stavlja na nulu travljati 
na 1 i to je to i to mozemo prodati kao ------------------------------Data recovery---------------------
u slucaju da izbrisemo fajl i da fa zelimo vratiti samo pozovemo f-ju DataRestore i ime fajla a ona ce pozvati nasu delete koja umjesto 
sto seta na nulu da je blok slobodan setovace na 1 da je zauzet
kljucna rijec recover datapath ili ime fajla i to je to

MFT_-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

pocetak mtf bloka ca sacinavato root blok u kom ce biti smjestene sve informacije vezane za fajl sistem slobodan prostor koliko je zauzeto ime fajl sistema verzija,tip arhitekture koji koristi sistem 
datum update koliko se moze maksimalno kreirati direktorijuma ,maksimalno fajlova ,koliko je fajlova trenutno na sistemu ,koliko je direktorijuma trenutno na sistemu 
plus    -Name 30bajta
	-isDirectory 1bajta
	-createdDate 30bajta
	-LastUsed 30bajta
	-lastModified 30bajta
	-fileAlocateFlag 1bajta
	-ResFlag 1bajta
	-SystemSize 4bajta
	-DirectoryArray * subdirectory 256bajta
	-FreeSpace 4bajta
	-FreeBlocks 4bajta
	-ClusterSize 4bajta
nakontoga dolaze nasi standardni blokovi (direktorijumi) 
	-Name 30bajta
	-isDirectory 1bajta
	-createdDate 30bajta
	-LastUsed 30bajta
	-lastModified 30bajta
	-fileAlocateFlag 1bajta
	-ResFlag 1bajt
	-Block 8bajta
	-Size 4bajta
	-Depth 1bajta
	-freeMft_space
	-promjenljiva u kojoj memorisemo koliko fajlova ili direktorijuma mozemo smjestiti 1B
	-promjenljiva koja nam govori koliko vec imamo 1B
i niz od 81 elementa u koji se memorisu blokovi fajlova i poddirektorijuma unutar mft-a 
f-ja za kreiranje direktorijuma radice na tom principu da ce primati string (path) od strane korisnika i pozvati 
f-ju za parcanje stringa ta funkcija vraca komad stringa od pocetka do / i vraca taj komad stringa 
zatim ce se pozvati f-ja za trazenje koja ce nas pozicionirati na mjesto gdje se nalazi direktorinum zatim se poziva ponovo f-ja za komadanje stringa i koja ce nam dati ime pod direktorijuma ili ime nowog direktorijuma ako je 
poddirektorijum onda se ponavlja prethodno a a ko je nowi onda ce se pozvati f-ja create(i dati jej ime direktorijuma-novog)
ta f-ja ce kreirati dir i vratiti ispis da je sve uspjesno odradjeno.
f-ju za parzanje strinja( patha) prima string po referenci zatim u privremeni string stavlja karaktere sve do / 
uklanja / i vraca taj privremeni string 
ova funkcija ce se pozivati od strane f-je za upis (kreiranje dira) kada se dobije nazad komad stringa od f-je za rasparcavanje taj string se salje f-ji za pretrazivanje 
f-ja za trazenje SearchBlock koja ce na osnovu niza u trenutnom direktoijumu ici i na zadati blok i provjeravati da li se ime tog bloka poklapa sa nasim ako ne vracaj nazad i provjeravaj za drugi ako ne nadje ni jedan sto odgovara onda ispisuje error a ako nadje 
pomjeri nas u taj blok(pozicionira) zatim se nazad vraca u f-ju za upis i ponovi se poziva f-ja za rasparcavanje stringa i f-ja trazi...
kada dodjemo do kraja te nase putanje poslednji komad stringa je nas novi direktipijum s tim pre nego sto ga kreiramo moramo da provjerima da li u trenutnom direktirijumu slicajno ima dir sa ovakvim imenom tako da ce mo ponovo pozvati f-ju za trazenje i provjeriti da li nemamo istoimeni dir ako imamo error ako ne onda pozvati f-ju 
za kreiranje Mkdir() kojoj se mo dati ime dira a vracace nam blok gdje je upisan
Mkdir f-ja ce prvo pozvati f-ju za trazenje slododnog bloka (ovdje necemo ici s tim da krecemo upis odma od kraja jer nam je cilj da sve popunjavamo a da kraj sto je moguce manje pomijeramo 
za ovo trazenje ce mo koristiti f-ju iz data segmenta za trazenje sa modifikacijom da nece traziti korakom 128B vec velicinom dira i radice isto prvi bit naseg dira ce sacinjavati dit isAlocated i samo njega ce mo citati i gledati da li je dir slobodan ili ne 
isto vraca poziciju bloka ta pozicija se vraca i mkdir f-ju ona u niz (na kraj upisanih elemenata dodava broj bloka ) i onda se pozicioniramo na mjesto tog bloka 
prvo i vrsi se upis podaraka prvi isAlocated zatim ime i onda ostalo sto sljeduje, kreira se nas niz i svi elementi niza se stavljaju na 50000 to ce nam sluziti kao flag da znamo dokle je niz popunjen 
 update sve sto treba (velicina posto je prazan 0 mah broj fajlova....
za upis fajla ce se iskoristiti neke f-je iz upisa direktorijuma f-ja za trazenje,f-ja za rasparcavanje...
---insertFile() prima path i kao za dir sve se isto radi s tim da se fajl trazi tako sto se od 1MB oduzima velicina bloka fajla 
ali dolazak do direktorijuma u koji se treba smjestiti fajl je isti kao za makedir.Kada nadjemo direktorijum u koji trebamo smjestiti fail prvo sto radimo je provjeravamo da li slucajno nemamo fail sa istim imenom tako sto ce mo 
pozvati f-ju checkFIle() dati joj ime fajla i pustiti je da u nizu provjeri da li postoji fail sa ovakvim imenom na nacin sto ce gledati samo negativne brojeve unutar niza (oni ce ocnacavati fajlove uzimati njihovu apsolutnu vrijednost pozicionirati se na mjesto bloka gdje se nalazi 
i pcitati 30B za ima (prvi bit se preskace on govori da li se fajl koristi ili ne ( isAlocated);
i pri tome provjeravati da slucajno memamo kajl koji je veci od 10000 ako jeste onda od tog broja oduzmi 10000 i ostatak je mjesto bloka (to su fajlovi memorisani u mft)
citaju se isto kako i do sada prvi bit preskace cita 30B itd... Ako je sve proslo kako treba onda ce poziva f-ja za kreiranje fajla
CreateFile(koja prima samo ime fajla) ona poziva f-ju za trazenje slobodnog bloka SearchForFIle koja radi isto kao f-ja koja trazi slobodan blok u mft-u samo sto korak kako prelazi na sledeci blok je inverzan tj od 1MB oduzimamo heder fajla i tako se pomijeramo po blokovima)
kada nadjemo blok vratimo poziciju bloka i upisujemo kao kod dira prvi bit 1 da se zna da se koristi zatim ime i onda sve sto sleduje 
) ne zaboraviti da se prvo treba upisati u niz dira pre nego sto se ode u blok od hedera 
velicina novokreiranog fajla je 0 

RJESENJE ZA PRETRAGU SA fajlovima memorisanim u mft je da u hederu fajla imamo dva bita prvi bit kovori da li je fajl slobodan ili ne a drugi bit govori o kakvom tipu fajla je jijec u fail hederu ako je 1 onda je to fajl sa mft memorijom i citaj ga na poseban nacin tj da kada se bude vrsila pretraga i naidje na ovakav fajl i procita da je 1 onda da naredni korak ne ide velicinom hajl hedera vec da na taj blok doda velivinu fajla plus blok memorije koji dolazi sa njim 
ovo je za pretrazivanje sekvencijalno i provjeravanje da li je fajl slobodan ili ne a da pri tome ne citamo direktorijume i slicno 

---za upis ili dodavanje novog fajla  
novi fajl dodavamo pozivajuci f-ju AddFIle(lokacija gdje se memorije i ime (ime je na kraju patha)))
koristimo sve f-je koje su prethodno definisane za trazenje fajla i kreiranje (kreiramo novi fajl upisemo sadrzaj onog fajla koga zelimo premjestiti i  onda izbrisemo taj fajl)
ali pre nego sto krenemo to raditi moramo obezbijediti:
provjera da li imamo dovoljno prostora da se smjesti fajl (uporediti slobodan prostor i velicinu fajla),
zatim izracunati koliko blokova treba da se smjesti fajl velicina fajla : (128B-17bita)
to memorisemo u heder fajla i pozivamo f-ju za upis u data segment i saljemo joj koliko nam blokova treba i ime fajla kog upisujemo f-ja vraca prvi blok 
i on se memorise u pocetak memorije fajla u data segmentu 
!!!INFO naci kako se brise na glavnom sistemu tj na drugom sistemu prilikom prebacivanja na nas;
----za brisanje fajla poziva se funkcija DELETEFILE(prima se putanja) zatim se prazi fajl za isti nacin kao i za dodavanje novog fajla s tim sto kada nadjemo lokaciju fajla samo promijenimo isAlocated bit na 0 i pozovemo f-ju za brisanje u data segmentu i saljemo joj samo pocetni blok i koliko blokova je digacak 
nas fajl (koliko zauzima blokova) Aktualizirati u mft-u slobodan prostor i zauzet prostor isto tako i u root-u 
ovo radimo da mozemo odmah na pozetku uraditi osnovne provjere i slicno 
--- kopiranje fajla f-ja copyFile(ime novi path ili dva parha prima ) sto znaci da ce mo opet koristiti iste f-je kao za upis fajla da pronadjemo lokaciju fajla s tim da samo u privremenu promjenljivu memorisemo blok u hederu koji se nalazi u nizu i onda u zinu na to mjesto stavimo onaj flag da je taj element u nizu slobodan 
i onda otici na drugu lokaciju gdje se treba kopitari i ubaciti u niz od tog dira vrijednos nase privremene 
---f-ja za recoveruData(prima ime ili path od podatka)i onda se pretrazuju slobodni blokovi i za ovo mozemo opet iskoristiti f-ju za trazenje slobodnih blokova u hederu sa modifikacijom da ce dodatno vrsiti citanje imena i provjeravanje da li ime odgovara nasem trazenom 
ako smo nasli pozicionirati se na blok (jos ne stavljati isAlocated na 1) prvo provjeriti da li je podatak u komadu a i za to ce pozvati f-ju recover koja ce pozvati f-ju iz data dijela Recover() primice pocetni blok i duzinu i obrnuto ce pozvati f-ju za brisanje ali na dva nacina prvo ce procitati sve blokove tj jednom ce proci samo da vidi da li postoji putanja tj da li su svi blokovi na nuli i da se zavrsava nakon koliko blokova treba da se zavrsava ako je to ispunjeno onda se ponovo poziva ta ista f-ja stim sto sada stavlja sve prve bitove na 1 i vraca kao povratnu vrijednost 0 kao uspjesno rekonstruisano i onda 
u hederu prvi bit stavljamo na 1 i ispisemo da je fajl uspjesno rekonstruisan 
----editovanje fajla to je se raditi tako sto ce se napraviti privremeni fajl u memoriji pozvati f-ja za citanje fajla i u privremeni fajl upisati nas fajl 
nakon editivanja fajla prvo provjeriti da li nova velicina fajla moze stati u nase blokove ako odgovara velicini blokova 
tj ako je velicina fajla <=velicina bloka *(128B-17bajta) onda direktno pozvati f-ju za upis u data segment dati joj pocetni fajl i ime fajla kog upisujemo ;
ako je nas fajl manji od onoga sto je bio u memoriji onda pozivamo f-ju delete da fajl koji je u memoriji (nasoj) i onda pozivamo f-ju za upis i davamo joj pocetni blok bivseg fajla i ime fajla i pocinjemo od lokacije bibseg fajla 
i upisujemo modifikovani fajl 
NOTE ovo se mora raditi jer ako ne onda postoji sansa da se male promjene u fajlu izgube sto je problem kod slika i vodeo zapisa 

sve ostale f-je su trivijalne osim get f-je 
koja sa naseg sistema prebacuje na racunar kako traziti fajl po sistemu java treba da ima gotove f-je koje mozemo koristiti da kreiramo fajl na racunaru i iz nasef fajla upisemo u taj fajl 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
VAZNO flagove sve u hederima reducirani su na velicinu od 1bita iz razloga zaurimaju manje memorije a i blokovi su fiksni i tazno znamo kako koji flag dolazi kojim redom 
tako da ovim smanjijemo velicine hedera dira i fajlova 

Sve sto je tipa thrue false prestavljati preko 1 bita neko nek bude dobar i izracuna koliko zauzimaju 
Ovo je lakse posto se mo raditi samo manipulacije na fajlovima i necemo ulaziti previse u prograiranje u smislu da ce mo traziti promjenljive i vrsiti konverzije sto je 
malko gore u smislu ima vise posla a ovo je isto dobro rjesenje ali sa manje posla 
data segment se nista ne mijenja ostaje kako je definisamo 



jos defragmentacija jebeno puzlanje 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==================================================================================================================================================================================================

















